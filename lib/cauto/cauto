#!/bin/bash

function cauto_help()
{
	cat << EOF

$(basename $0)

	$(basename $0) init
		init a new project in working dir
	$(basename $0) scan
		scan for targets, dependencies and update config
	$(basename $0) conf
		configure CMakeCache.txt
	$(basename $0) make <targets>
		build targets
	$(basename $0) clean
		clean project
	$(basename $0) help
		show help
	$(basename $0) doc
		show documentation

EOF
}

function cauto_doc()
{
		cat << EOF

CAuto is a tool for automatic compile and link c++ projects
using CMake and a naming convention in the source tree.

Source tree consists of the following directories:
	exe/
		targets to be compiled into executables
	so/
		targets to be compiled into shared object
	inc/
		header of sources in src/
	src/
		source of headers in inc/
	conf/
		project configuration
	build/
		project build dir
	find/
		local FindPackage.cmake scripts of project

Targets are build into build/. The directory structure of
	exe/* and so/* is recreated in build/* and targets
	are named according the basename of the corresponding
	target source file. If new targets are added or removed
	from the source tree _cauto scan_ has to be invoked
	to update the Makefile.

Headers and Sources are located in inc/ and src/. By naming
	convention it is required for a source file that a header
	file exists in inc/ with the same basename. Dependencies
	of source files and targets are scanned using _g++ -MM_.
	This requires the targets cxxflags and all involved source
	files to be syntactically correct.

Configuration of the project is located in conf/. The directory
	structure of exe/* and so/* is recreated in conf/* and
	following config files can be used to setup the project:
		conf/*/cxxflags
			compile flags for all targets in subdirs
		conf/*/ldflags
			linker flags for all targets in subdirs
		conf/*/packages
			list of <var_suffix> of CMake packages for
			all targets in subdirs
		conf/*/<target>.cxxflags
			compile flags for <target>
		conf/*/<target>.ldflags
			linker flags for <target>
		conf/*/<target>.package
			list of <var_suffix> of CMake packages for <target>
	CMake packages which are involved in the project have
	to be configured in _conf/package.cmake_. In order
	to use a CMake package a FindPackage.cmake script has
	to be installed in CMake default search path or in find/.

Packages which are used by targets in the project are added
	by using CMake command _ADD_PACKAGE(...)_ in the CMake file
	_conf/package.cmake_ using the following syntax:
	ADD_PACKAGE(<var_suffix> <FIND_PACKAGE_params ...>)
	The command uses the same syntax as CMake FIND_PACKAGE but
	adds an additional parameter <var_suffix>. CAuto configures
	targets using the following CMake variables:
		<var_prefix>_INCLUDE_DIRS
			include dirs to be used to compile target
		<var_prefix>_LIBRARIES
			libraries to be used to link target
		<var_prefix>_DEFINITIONS
			definitions to be used to compile target
	In order to configure CAuto to use a certain packages to
	build a <target>, all <var_suffix>es of the packages have
	to be listed in _conf/*/<target>.package_ file.
	If a FindPackage.cmake script doesnt return the variables
	assumed by CAuto a cmake file _conf/<var_suffix>.cmake_ is
	called in which the variables can be set up using the find
	script output.

EOF
}

[ X"$*" == X ] && \
	cauto_help &&
	exit 1

CMAKELISTS="$(readlink -m $(dirname $0)/CMakeLists.txt)"

while [ $# -gt 0 ]
do
	COMMAND=$1
	shift
	case ${COMMAND} in
		init)
			(
				ln -fs ${CMAKELISTS} .
				mkdir -p build
				(
					cd build
					cmake ..
				)
			)
			;;

		scan)
			[ -e build ] && \
				(
					cd build
					cmake ..
				)
			;;

		conf)
			[ -e build ] && \
				(
					cd build
					ccmake ..
				)
			;;

		make)
			TARGETS=$*
			[ -e build ] && \
				(
					cd build
					make ${TARGETS}
				)
			exit $?
			;;

		clean)
			rm -rf build/*
			;;

		help)
			cauto_help
			;;

		doc)
			cauto_doc
			;;
	esac
done

exit $?
